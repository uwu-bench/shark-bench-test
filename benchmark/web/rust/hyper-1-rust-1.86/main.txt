

#[global_allocator]
static GLOBAL: mimalloc::MiMalloc = mimalloc::MiMalloc;

use http_body_util::Full;
use hyper::body::Bytes;
use hyper::server::conn::http1;
use hyper::service::service_fn;
use hyper::{Request, Response};
use hyper_util::rt::TokioIo;
use std::collections::HashMap;
use std::convert::Infallible;
use std::rc::Rc;

use reqwest::Client;
use serde::{Deserialize, Serialize};
use tokio::task::LocalSet;

#[derive(Debug)]
enum AppError {
    Io(std::io::Error),
    Network(reqwest::Error),
    Json(serde_json::Error),
    NotFound,
}

impl From<std::io::Error> for AppError {
    fn from(err: std::io::Error) -> Self {
        AppError::Io(err)
    }
}

impl From<reqwest::Error> for AppError {
    fn from(err: reqwest::Error) -> Self {
        AppError::Network(err)
    }
}

impl From<serde_json::Error> for AppError {
    fn from(err: serde_json::Error) -> Self {
        AppError::Json(err)
    }
}

#[tokio::main(flavor = "current_thread")]
async fn main() -> Result<(), AppError> {
    let local = LocalSet::new();

    local
        .run_until(async move {
            let client: Rc<Client> = Rc::new(Client::new());
            let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();

            loop {
                let (stream, _) = match listener.accept().await {
                    Ok(s) => s,
                    Err(e) => {
                        eprintln!("accept error: {:?}", e);
                        continue;
                    }
                };
                let io = TokioIo::new(stream);
                let client_ref = client.clone();

                tokio::task::spawn_local(async move {
                    if let Err(err) = http1::Builder::new()
                        .serve_connection(
                            io,
                            service_fn(|request: Request<hyper::body::Incoming>| {
                                let client_ref = client_ref.clone();
                                async move { handle_request(client_ref, request).await }
                            }),
                        )
                        .await
                    {
                        eprintln!("Error serving connection: {:?}", err);
                    }
                });
            }
        })
        .await;

    Ok(())
}

async fn handle_request(
    client: Rc<Client>,
    request: Request<hyper::body::Incoming>,
) -> Result<Response<Full<Bytes>>, Infallible> {
    let path: &str = request.uri().path();

    if request.method() != hyper::Method::GET {
        return Ok(Response::builder()
            .status(405)
            .body(Full::new(Bytes::from_static(b"405 Method Not Allowed")))
            .unwrap());
    }

    let symbol: Option<String> = request.uri().query().and_then(|query| {
        query.split('&').find_map(|q| {
            let mut split = q.split('=');
            let key = split.next()?;
            let value = split.next()?;
            if key == "symbol" {
                Some(value.to_owned())
            } else {
                None
            }
        })
    });

    let Some(symbol) = symbol else {
        return Ok(Response::builder()
            .status(400)
            .body(Full::new(Bytes::from_static(b"400 Bad Request")))
            .unwrap());
    };

    let response_body = match path {
        "/api/v1/periodic-table/element" => match get_element(client, &symbol).await {
            Ok(data) => data.into_bytes(),
            Err(AppError::NotFound) => {
                return Ok(Response::builder()
                    .status(404)
                    .body(Full::new(Bytes::from_static(b"404 Element Not Found")))
                    .unwrap());
            }
            Err(e) => {
                eprintln!("Error getting element: {:?}", e);
                return Ok(Response::builder()
                    .status(500)
                    .body(Full::new(Bytes::from_static(b"500 Internal Server Error")))
                    .unwrap());
            }
        },
        "/api/v1/periodic-table/shells" => match get_shells(client, &symbol).await {
            Ok(data) => data.into_bytes(),
            Err(AppError::NotFound) => {
                return Ok(Response::builder()
                    .status(404)
                    .body(Full::new(Bytes::from_static(b"404 Shells Not Found")))
                    .unwrap());
            }
            Err(e) => {
                eprintln!("Error getting shells: {:?}", e);
                return Ok(Response::builder()
                    .status(500)
                    .body(Full::new(Bytes::from_static(b"500 Internal Server Error")))
                    .unwrap());
            }
        },
        _ => {
            return Ok(Response::builder()
                .status(404)
                .body(Full::new(Bytes::from_static(b"404 Not Found")))
                .unwrap());
        }
    };

    Ok(Response::new(Full::new(Bytes::from(response_body))))
}

async fn get_element(client: Rc<Client>, symbol: &str) -> Result<String, AppError> {
    let json: HashMap<String, DataSourceElement> = client
        .get("http://web-data-source/element.json")
        .send()
        .await?
        .json()
        .await?;

    let entry = json.get(symbol).ok_or(AppError::NotFound)?;

    let response = ElementResponse {
        name: entry.name.clone(),
        number: entry.number,
        group: entry.group,
    };

    Ok(serde_json::to_string(&response)?)
}

async fn get_shells(client: Rc<Client>, symbol: &str) -> Result<String, AppError> {
    let json: HashMap<String, Vec<u8>> = client
        .get("http://web-data-source/shells.json")
        .send()
        .await?
        .json()
        .await?;

    let shells = json.get(symbol).ok_or(AppError::NotFound)?;

    let response = ShellsResponse {
        shells: shells.clone(),
    };

    Ok(serde_json::to_string(&response)?)
}

#[derive(Serialize)]
struct ElementResponse {
    name: String,
    number: u8,
    group: u8,
}

#[derive(Serialize)]
struct ShellsResponse {
    shells: Vec<u8>,
}

#[derive(Deserialize, Debug)]
struct DataSourceElement {
    name: String,
    number: u8,
    group: u8,
}
